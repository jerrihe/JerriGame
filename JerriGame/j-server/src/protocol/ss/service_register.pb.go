// Code generated by register. DO NOT EDIT.

package ss

import "google.golang.org/protobuf/reflect/protoreflect"

import "google.golang.org/protobuf/proto"

type EnmCmdValue SS_CMD

type IMessage interface {
	Reset()
	String() string
	ProtoMessage()
	ProtoReflect() protoreflect.Message
	Descriptor() ([]byte, []int)
}

type newMessage func () proto.Message

var imessageMap map[int32] newMessage
var cmdReqResMap map[int32] int32

func NewServiceMessage(CmdId int32) proto.Message {
	v, ok := imessageMap[CmdId]
	if ! ok {
		return nil
	}
	return v()
}

func GetResCmdId(reqCmdId int32) int32{
	v, ok := cmdReqResMap[reqCmdId]
	if ! ok {
		return 0
	}
	return v
}

func newSsCmdKickAccountReq() proto.Message {
	return &SsCmdKickAccountReq{}
}

func newSsCmdKickAccountRes() proto.Message {
	return &SsCmdKickAccountRes{}
}

func newSsCmdRegisterServerReq() proto.Message {
	return &SsCmdRegisterServerReq{}
}

func newSsCmdRegisterServerRes() proto.Message {
	return &SsCmdRegisterServerRes{}
}

func init() {
	imessageMap = make(map[int32] newMessage)
	imessageMap[1] = newSsCmdKickAccountReq
	imessageMap[2] = newSsCmdKickAccountRes
	imessageMap[3] = newSsCmdRegisterServerReq
	imessageMap[4] = newSsCmdRegisterServerRes

	cmdReqResMap = make(map[int32]int32)
	cmdReqResMap[1] = 2
	cmdReqResMap[3] = 4
}

func GetCmdValueByMsg(msg interface{}) EnmCmdValue {
	if nil == msg {
		return EnmCmdValue(0)
	}
	switch msg.(type) {
		case SsCmdKickAccountReq:
			return EnmCmdValue(1)
		case *SsCmdKickAccountReq:
			return EnmCmdValue(1)
		case SsCmdKickAccountRes:
			return EnmCmdValue(2)
		case *SsCmdKickAccountRes:
			return EnmCmdValue(2)
		case SsCmdRegisterServerReq:
			return EnmCmdValue(3)
		case *SsCmdRegisterServerReq:
			return EnmCmdValue(3)
		case SsCmdRegisterServerRes:
			return EnmCmdValue(4)
		case *SsCmdRegisterServerRes:
			return EnmCmdValue(4)
	}
	return EnmCmdValue(0)
}

