package main

import (
	"fmt"
	"os"
	"strings"
	// "register/goprotos/cs"
	// "register/goprotos/ss"
	"jserver/src/protocol/cs"
	"jserver/src/protocol/ss"
)

/**
 * // {{client/service}}_register.go
 *
 * // Code generated by register. DO NOT EDIT.
 *
 * package cs/ss
 *
 * type IMessage interface {
 *		String() string
 *		Unmarshal(dAtA []byte) error
 *		Reset()
 *		ProtoMessage()
 * }
 *
 * type newMessage func () IMessage
 *
 * var imessageMap map[int32] newMessage
 * var cmdReqResMap map[int32] int32
 *
 * func New{{Client/Service}}Message(CmdId int32) IMessage {
 *		v, ok := imessageMap[CmdId]
 *		if ! ok {
 *			return nil
 *		}
 *		return v()
 * }
 *
 * func GetResCmdId(reqCmdId int32) int32 {
 *		v, ok := cmdReqResMap[reqCmdId]
 *		if ! ok {
 *			return 0
 *		}
 *		return v
 * }
 *
 * func new{Request/Response}() IMessage {
 *		return &{Request/Response}{}
 * }
 *
 * func init() {
 *		imessageMap = make(map[int32] newMessage)
 *
 *		imessageMap[CmdValue] = new{Request/Response}
 * }
 *
 */

func toCamelCase(input string) string {
	// 将字符串按下划线分割
	parts := strings.Split(input, "_")
	var result string

	// 遍历每一部分，将首字母大写，其余字母小写
	for _, part := range parts {
		if len(part) > 0 {
			// 转换首字母大写，其余字母小写
			result += strings.ToUpper(part[:1]) + strings.ToLower(part[1:])
		}
	}

	return result
}

func genCmdValueToMessage(outfile, namespace, name string, kv map[string]int32, cmd_name string) {
	// crFile, crerr := os.Create(outfile)
	// if crerr != nil {
	// 	fmt.Printf("create file failed. Outfile: %s\n", outfile)
	// 	return
	// }

	crFile, err := os.OpenFile(outfile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		fmt.Errorf("failed to open or create file: %w", err)
		return
	}

	defer crFile.Close()

	cmdName := toCamelCase(cmd_name)

	crFile.WriteString("// Code generated by register. DO NOT EDIT.\n\n")

	crFile.WriteString(fmt.Sprintf("package %s\n\n", namespace))

	crFile.WriteString(fmt.Sprintf("import \"google.golang.org/protobuf/reflect/protoreflect\"\n\n"))
	crFile.WriteString(fmt.Sprintf("import \"google.golang.org/protobuf/proto\"\n\n"))

	crFile.WriteString(fmt.Sprintf("type EnmCmdValue %s\n\n", cmd_name))
	
	crFile.WriteString("type IMessage interface {\n")
	crFile.WriteString("\tReset()\n")
	crFile.WriteString("\tString() string\n")
	crFile.WriteString("\tProtoMessage()\n")
	// crFile.WriteString("\tUnmarshal(dAtA []byte) error\n")
	crFile.WriteString("\tProtoReflect() protoreflect.Message\n")
	crFile.WriteString("\tDescriptor() ([]byte, []int)\n")
	
	// crFile.WriteString("\tMarshal() (dAtA []byte, err error)\n\tMarshalTo(dAtA []byte) (int, error)\n")
	// crFile.WriteString("\tSize() (n int)\n")
	crFile.WriteString("}\n\n")

	crFile.WriteString("type newMessage func () proto.Message\n\n")
	crFile.WriteString("var imessageMap map[int32] newMessage\n")
	crFile.WriteString("var cmdReqResMap map[int32] int32\n\n")

	crFile.WriteString(fmt.Sprintf("func New%sMessage(CmdId int32) proto.Message {\n", name))
	crFile.WriteString("\tv, ok := imessageMap[CmdId]\n")
	crFile.WriteString("\tif ! ok {\n")
	crFile.WriteString("\t\treturn nil\n")
	crFile.WriteString("\t}\n")
	crFile.WriteString("\treturn v()\n")
	crFile.WriteString("}\n\n")

	crFile.WriteString("func GetResCmdId(reqCmdId int32) int32{\n")
	crFile.WriteString("\tv, ok := cmdReqResMap[reqCmdId]\n")
	crFile.WriteString("\tif ! ok {\n")
	crFile.WriteString("\t\treturn 0\n")
	crFile.WriteString("\t}\n")
	crFile.WriteString("\treturn v\n")
	crFile.WriteString("}\n\n")

	for k, v := range kv {
		if v == 0 {
			continue
		}
		// name := k[4:]
		name := toCamelCase(k)
		crFile.WriteString("func new" + cmdName + name + "() proto.Message {\n")
		crFile.WriteString("\treturn &" + cmdName + name + "{}\n")
		crFile.WriteString("}\n\n")
	}

	crFile.WriteString("func init() {\n")
	crFile.WriteString("\timessageMap = make(map[int32] newMessage)\n")
	for k, v := range kv {
		// name := k[4:]
		name := toCamelCase(k)
		if v == 0 {
			continue
		}
		crFile.WriteString("\timessageMap[" + fmt.Sprintf("%d", v) + "] = new" + cmdName + name + "\n")
	}
	crFile.WriteString("\n\tcmdReqResMap = make(map[int32]int32)\n")
	for k, reqCmdId := range kv {
		if reqCmdId == 0 {
			continue
		}
		klen := len(k)
		req := k[klen-3:]
		if req != "REQ" {
			continue
		}
		res := k[:klen-1] + "S"
		if resCmdId, ok := kv[res]; ok {
			crFile.WriteString(fmt.Sprintf("\tcmdReqResMap[%d] = %d\n", reqCmdId, resCmdId))
		}
	}
	crFile.WriteString("}\n\n")
	crFile.WriteString("func GetCmdValueByMsg(msg interface{}) EnmCmdValue {\n")
	crFile.WriteString("\tif nil == msg {\n")
	crFile.WriteString("\t\treturn EnmCmdValue(0)\n")
	crFile.WriteString("\t}\n")
	crFile.WriteString("\tswitch msg.(type) {\n")
	for k, v := range kv {
		if v == 0 {
			continue
		}
		// name := k
		name := toCamelCase(k)
		crFile.WriteString("\t\tcase " + cmdName + name + ":\n")
		crFile.WriteString(fmt.Sprintf("\t\t\treturn EnmCmdValue(%d)\n", v))
		crFile.WriteString("\t\tcase *" + cmdName + name + ":\n")
		crFile.WriteString(fmt.Sprintf("\t\t\treturn EnmCmdValue(%d)\n", v))
	}
	crFile.WriteString("\t}\n")
	crFile.WriteString("\treturn EnmCmdValue(0)\n")
	crFile.WriteString("}\n\n")
}

func main() {
	genCmdValueToMessage("../../src/protocol/cs/client_register.pb.go", "cs", "Client", cs.CS_CMD_value, "CS_CMD")
	genCmdValueToMessage("../../src/protocol/ss/service_register.pb.go", "ss", "Service", ss.SS_CMD_value, "SS_CMD")
}
